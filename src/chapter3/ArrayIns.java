package chapter3;

// insertSort.java
// Сортировка методом вставки
// Запуск программы: C>java InsertSortApp
//--------------------------------------------------------------
class ArrayIns {
    private long[] a;// Ссылка на массив aСортировка методом вставки
    private int nElems;    // Количество элементов данных

    //--------------------------------------------------------------
    public ArrayIns(int max)// Конструктор
    {
        a = new long[max];// Создание массива
        nElems = 0;// Пока нет ни одного элемента
    }

    //--------------------------------------------------------------
    public void insert(long value)// Вставка элемента в массив
    {
        a[nElems] = value;// Собственно вставка
        nElems++;// Увеличение размера
    }

    //--------------------------------------------------------------
    public void display()// Вывод содержимого массива
    {
        for (int j = 0; j < nElems; j++)// Для каждого элемента
            System.out.print(a[j] + " "); // Вывод
        System.out.println("");
    }

    //--------------------------------------------------------------
    public void insertionSort() {
        int in, out;
        for (out = 1; out < nElems; out++)// out - разделительный маркер
        {
            long temp = a[out];// Скопировать помеченный элемент
            in = out;// Начать перемещения с out
            while (in > 0 && a[in - 1] >= temp) // Пока не найден меньший элемент
            {
                a[in] = a[in - 1];// Сдвинуть элемент вправо
                --in;// Перейти на одну позицию влево
            }
            a[in] = temp;// Вставить помеченный элемент
        }
    }

    public float median() {
        insertionSort();
        if (nElems % 2 == 0) {
            long l1 = a[nElems / 2 - 1];
            long l2 = a[nElems / 2];
            float l = ((float) l1 + l2) / 2;
            return l;
        } else {
            return a[nElems / 2];
        }
    }

    public void noDubs() {
        insertionSort();
        int end = 1;
        for (int i = 0; i < nElems - 1; ) {
            if (end == nElems - 1) {
                nElems = i + 1;
                break;
            }
            if (a[i] >= a[i + 1]) {
                for (int j = i + 1; j < nElems; j++) {
                    if (a[i] < a[j]) {
                        a[i + 1] = a[j];
                        i = i + 1;
                        end = j;
                        break;
                    }
                    if (a[i] == a[j] && j == nElems - 1) {
                        nElems = i+1;
                        break;
                    }
                    if (a[i] > a[j]) {
                        j++;
                        continue;
                    }
                }
            } else {
                i += 1;
            }
        }
    }
}


//    Добавьте в программу insertSort.java (листинг 3.3) метод noDups() , который
//        удаляет дубликаты из ранее отсортированного массива без нарушения порядка
//        элементов. (Используйте метод insertionSort() для сортировки данных или просто
//        вставьте данные в порядке сортировки в main() .) Нетрудно представить себе схему,
//        в которой все элементы от позиции обнаружения дубликата до конца массива сдви
//        гаются на одну позицию, но это замедлит работу алгоритма до времени O(N 2 ) —
//        по крайней мере при большом количестве дубликатов. Проследите за тем, чтобы
//        в вашем алгоритме ни один элемент не перемещался более одного раза независи-
//        мо от количества дубликатов — это обеспечит выполнение алгоритма за время O(N ).

//--------------------------------------------------------------
